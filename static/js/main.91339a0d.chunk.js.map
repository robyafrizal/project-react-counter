{"version":3,"sources":["assets/logos/image1.jpeg","components/greeting.js","components/imageAlbum.js","components/counter.js","components/stateClass.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Greeting","name","ImageAlbum","imageKu","this","props","src","alt","React","Component","Counter","state","value","buttonAddClicked","bind","buttonSubClicked","event","setState","alert","onClick","StateClass","changeLoadingState","isLoading","getElemenName","index","data","console","log","classMateName","classMate","map","key","getElementName","className","App","namaBebas","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,qC,6JCW5BC,MATf,YAA6B,IAATC,EAAQ,EAARA,KAClB,OACE,6BACE,8CACA,iDAAuBA,K,mCCOdC,E,iLAVH,IACAC,EAAYC,KAAKC,MAAjBF,QACR,OACE,6BACE,yBAAKG,IAAKH,EAASI,IAAI,c,GALNC,IAAMC,W,OC4BhBC,E,YA3Bb,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CAAEC,MAAO,GACtB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAJP,E,8EAMFE,GACfZ,KAAKa,SAAS,CAAEL,MAAOR,KAAKO,MAAMC,MAAQ,M,uCAE3BI,GACU,IAArBZ,KAAKO,MAAMC,MACbM,MAAM,wCAENd,KAAKa,SAAS,CAAEL,MAAOR,KAAKO,MAAMC,MAAQ,M,+BAI5C,OACE,6BACE,6BAAMR,KAAKO,MAAMC,OACjB,4BAAQO,QAASf,KAAKS,kBAAtB,UACA,4BAAQM,QAASf,KAAKW,kBAAtB,e,GAtBcN,a,gBC4DPW,E,YA3Db,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KAQRgB,mBAAqB,WACnB,EAAKJ,SAAS,CACZK,WAAY,EAAKX,MAAMW,aAXR,EAcnBC,cAAgB,SAACC,EAAOC,GACtBC,QAAQC,IAAR,WAAgBH,EAAhB,aAA0BC,IAC1B,EAAKR,SAAS,CACZW,cAAeH,KAfjB,EAAKd,MAAQ,CACXW,WAAW,EACXO,UAAW,CAAC,OAAQ,UAAW,aAC/BD,cAAe,IALA,E,sEAoBT,IAAD,OACP,OAAKxB,KAAKO,MAAMW,UAQZ,gCACE,yBAAKH,QAASf,KAAKiB,oBAChBjB,KAAKO,MAAMW,UAAY,aAAe,cAGzC,6BACE,2CACClB,KAAKO,MAAMkB,WACVzB,KAAKO,MAAMkB,UAAUC,KAAI,SAACL,EAAMD,GAC9B,OACE,uBACEO,IAAKP,EACLL,QAAS,kBAAM,EAAKa,eAAeR,EAAOC,KAEzCA,OAMX,6BACE,qDACCrB,KAAKO,MAAMiB,eAAiB,2BAAIxB,KAAKO,MAAMiB,iBA5BhD,yBAAKK,UAAU,WAAWd,QAASf,KAAKiB,oBAAxC,+B,GAxBiBZ,aCyBVyB,MAlBf,WACE,OACE,kCACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,CAAUhC,KAAK,2BADjB,IAEE,kBAAC,EAAD,CAAYE,QAASgC,OAEvB,4BAAQF,UAAU,WAChB,kBAAC,EAAD,OAEF,gCACE,6BACA,kBAAC,EAAD,SCTYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.91339a0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.d1bf319a.jpeg\";","import React from \"react\";\n\nfunction Greeting({ name }) {\n  return (\n    <div>\n      <h1>Hallo semua..!</h1>\n      <h5>Selamat Belajar - {name}</h5>\n    </div>\n  );\n}\n\nexport default Greeting;\n","import React from \"react\";\n\nclass ImageAlbum extends React.Component {\n  render() {\n    const { imageKu } = this.props;\n    return (\n      <div>\n        <img src={imageKu} alt=\"User\" />\n      </div>\n    );\n  }\n}\n\nexport default ImageAlbum;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: 0 };\n    this.buttonAddClicked = this.buttonAddClicked.bind(this);\n    this.buttonSubClicked = this.buttonSubClicked.bind(this);\n  }\n  buttonAddClicked(event) {\n    this.setState({ value: this.state.value + 1 });\n  }\n  buttonSubClicked(event) {\n    if (this.state.value === 0) {\n      alert(\"Angka sudah tidak bisa dikurang lagi\");\n    } else {\n      this.setState({ value: this.state.value - 1 });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div>{this.state.value}</div>\n        <button onClick={this.buttonAddClicked}>Tambah</button>\n        <button onClick={this.buttonSubClicked}>Kurang</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\n\nclass StateClass extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      classMate: [\"Roby\", \"Afrizal\", \"Palmendha\"],\n      classMateName: \"\"\n    };\n    //this.changeLoadingState = this.changeLoadingState.bind(this)\n  }\n  changeLoadingState = () => {\n    this.setState({\n      isLoading: !this.state.isLoading\n    });\n  };\n  getElemenName = (index, data) => {\n    console.log(`[${index}] ${data}`);\n    this.setState({\n      classMateName: data\n    });\n  };\n  render() {\n    if (!this.state.isLoading) {\n      return (\n        <div className=\"klikData\" onClick={this.changeLoadingState}>\n          Ulang Click Data ini..!\n        </div>\n      );\n    } else {\n      return (\n        <center>\n          <div onClick={this.changeLoadingState}>\n            {this.state.isLoading ? \"Data Benar\" : \"Data Salah\"}\n          </div>\n\n          <div>\n            <h1>Isi Data : </h1>\n            {this.state.classMate &&\n              this.state.classMate.map((data, index) => {\n                return (\n                  <p\n                    key={index}\n                    onClick={() => this.getElementName(index, data)}\n                  >\n                    {data}\n                  </p>\n                );\n              })}\n          </div>\n\n          <div>\n            <h1>Ini nama lengkap saya</h1>\n            {this.state.classMateName && <p>{this.state.classMateName}</p>}\n          </div>\n        </center>\n      );\n    }\n  }\n}\n\nexport default StateClass;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Greeting from \"./components/greeting\";\nimport ImageAlbum from \"./components/imageAlbum\";\nimport MyButton from \"./components/counter\";\nimport namaBebas from \"./assets/logos/image1.jpeg\"; //import image\nimport StateClass from \"./components/stateClass\";\n\nfunction App() {\n  return (\n    <fragment>\n      <div className=\"App\">\n        <Greeting name=\"Roby Afrizal Palmendha\" /> {/*  Ini adalah Komponen */}\n        <ImageAlbum imageKu={namaBebas} />\n      </div>\n      <center className=\"counter\">\n        <MyButton />\n      </center>\n      <center>\n        <hr />\n        <StateClass />\n      </center>\n    </fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}